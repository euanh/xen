(*
 * Copyright (C) 2009-2011 Citrix Ltd.
 * Author Vincent Hanquez <vincent.hanquez@eu.citrix.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; version 2.1 only. with the special
 * exception on linking described in file LICENSE.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *)

type error = 
    Nonspecific |
    Version |
    Fail |
    Ni |
    Nomem |
    Inval |
    Badfail |
    Guest_Timedout |
    Timedout |
    Noparavirt |
    Not_Ready |
    Osevent_Reg_Fail |
    Bufferfull |
    Unknown_Child

val string_of_error: error -> string

exception Error of (error * string)

type ctx

external ctx_alloc: Xentoollog.handle -> ctx = "stub_libxl_ctx_alloc"
external ctx_free: ctx -> unit = "stub_libxl_ctx_free"

val with_ctx : ?logger:Xentoollog.handle -> (ctx -> 'a) -> 'a

external test_raise_exception: unit -> unit = "stub_raise_exception"

type domid = int
type devid = int

(* type for event callbacks *)
type for_libxl

type event =
	| POLLIN (* There is data to read *)
	| POLLPRI (* There is urgent data to read *)
	| POLLOUT (* Writing now will not block *)
	| POLLERR (* Error condition (revents only) *)
	| POLLHUP (* Device has been disconnected (revents only) *)
	| POLLNVAL (* Invalid request: fd not open (revents only). *)

(* @@LIBXL_TYPES@@ *)

external send_trigger : ctx -> domid -> trigger -> int -> unit = "stub_xl_send_trigger"
external send_sysrq : ctx -> domid -> char -> unit = "stub_xl_send_sysrq"
external send_debug_keys : ctx -> string -> unit = "stub_xl_send_debug_keys"
external xen_console_read : ctx -> string list = "stub_xl_xen_console_read"

external osevent_register_hooks : ctx -> 'a -> 'b = "stub_xl_osevent_register_hooks"
external osevent_occurred_fd : ctx -> for_libxl -> Unix.file_descr -> event list -> event list -> unit = "stub_xl_osevent_occurred_fd"
external osevent_occurred_timeout : ctx -> for_libxl -> unit = "stub_xl_osevent_occurred_timeout"

external evenable_domain_death : ctx -> domid -> int -> unit = "stub_xl_evenable_domain_death"
external event_register_callbacks : ctx -> 'a -> 'b = "stub_xl_event_register_callbacks"

external poll : (Unix.file_descr * event list) list -> event list list = "stub_poll"

