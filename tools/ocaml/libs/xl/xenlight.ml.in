(*
 * Copyright (C) 2009-2011 Citrix Ltd.
 * Author Vincent Hanquez <vincent.hanquez@eu.citrix.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; version 2.1 only. with the special
 * exception on linking described in file LICENSE.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *)

open Xentoollog

type error = 
    Nonspecific |
    Version |
    Fail |
    Ni |
    Nomem |
    Inval |
    Badfail |
    Guest_Timedout |
    Timedout |
    Noparavirt |
    Not_Ready |
    Osevent_Reg_Fail |
    Bufferfull |
    Unknown_Child

let string_of_error error =
  match error with
  | Nonspecific -> "Non specific"
  | Version -> "Version"
  | Fail -> "Fail"
  | Ni -> "Ni"
  | Nomem -> "Nomem"
  | Inval -> "Inval"
  | Badfail -> "Badfail"
  | Guest_Timedout -> "Guest Timedout"
  | Timedout -> "Timedout"
  | Noparavirt -> "Noparavirt"
  | Not_Ready -> "Not Ready"
  | Osevent_Reg_Fail -> "Osevent Reg Fail"
  | Bufferfull -> "Bufferfull"
  | Unknown_Child -> "Unknown Child"

exception Error of (error * string)

type ctx

external ctx_alloc: Xentoollog.handle -> ctx = "stub_libxl_ctx_alloc"
external ctx_free: ctx -> unit = "stub_libxl_ctx_free"

let with_ctx ?logger f =
	let logger' = match logger with
		| None -> Xentoollog.create_stdio_logger (*~level:Xentoollog.Debug*) ()
		| Some l -> l
	in
	let ctx = ctx_alloc logger' in
	let res = try f ctx with exn ->
		ctx_free ctx;
		if logger = None then Xentoollog.destroy logger';
		raise exn
	in
	ctx_free ctx;
	if logger = None then Xentoollog.destroy logger';
	res

external test_raise_exception: unit -> unit = "stub_raise_exception"

type domid = int
type devid = int

module Cpuid_policy = struct
	type t
end

(* @@LIBXL_TYPES@@ *)

external list_domain: ctx -> Dominfo.t list = "stub_libxl_list_domain"

external send_trigger : domid -> trigger -> int -> unit = "stub_xl_send_trigger"
external send_sysrq : domid -> char -> unit = "stub_xl_send_sysrq"
external send_debug_keys : ctx -> string -> unit = "stub_xl_send_debug_keys"
external xen_console_read : ctx -> string list = "stub_xl_xen_console_read"

(* this introduces a race condition on startup! *)
let _ = Callback.register_exception "Xenlight.Error" (Error(Fail, ""))
